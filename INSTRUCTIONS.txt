Dans le dossier tu as toutes les images que j'ai créé
Tu as aussi dedans des plaquettes visuelle du jeu dans sa globalité pour que
tu vois vite fait à quoi ça doit ressembler

Chaque image est un carré de 1080 x 1080 px pour avoir une qualité élevée

Je te propose donc quand tu feras l'interface graphique de faire une fenêtre carré (parce que le programme
que j'ai fait marche que pour un jeu sur une map carrée)
Je te propose de mettre ta fenêtre à la taille de 1071 x 1071 px (avec cette définition la fenêtre fera presque
toute la hauteur de ton écran) et je te conseille dans les fonctions de la bibliothèque graphique si c'est possible
de ne pas autoriser le redimensionnement de la fenêtre par l'utilisateur.

Ensuite dis toi que le jeu est composé de plusieurs tableaux/vector
Dans Partie.cc Partiesimple.cc Partiecomplexe.cc tu as :
	- un vecteur par différents type d'éléments (sauf pour les pastilles qui sont justes des objets uniques)
	- un tableau à 2 dimensions, de pointeur d'Element de taille GAME_SIZE
	Ce tableau sert juste a connaitre la position de tous les éléments contenus dans les vecteurs et de connaître
	si le snake peut se déplacer à un endroit ou non DONC T OCCUPES PAS DE CE TABLEAU POUR L INTERFACE GRAPHIQUE
	Il s'appelle matrix_game je crois

DANS LE CALCUL DU JEU JE NE CREE PAS DE MURS SUR LA BORDURE DU JEU (je les ajoute juste a l'affichage)

Par defaut j'ai mis GAME_SIZE (la surface de jeu disponible -> hors mur sur la bordure) = 15

Donc dis toi que tu as une capacite de jeu de 15 x 15 elements

Pour l'affichage, les fonctions print de Partiesimple et Partiecomplexe creent juste une tableau de string de taille
GAMES_SIZE + 2 = 17 (par défaut) ce + 2 est du au fait que pour l'affichage on affiche des bords externes a chaque extrémité 
du jeu et ensuite j'ajoute dans ce tableau les affichages des différents éléments contenus dans les différents vector et les pastilles

Ainsi je te propose donc de :
La fenêtre de taille 1071 x 1071 px doit contenir 17 * 17 éléments => 17 * 63 = 1071
Si tu fais une fenêtre de 1080 x 1080 px, la taille d'un élément aurait donné 1080 /17 = 63.452 (c'est impossible d'avoir un affichage propre
si la taille des images des éléments n'est pas un entier)

Donc on prend une taille de fenêtre de 1071 * 1071 (plus grand j'ai peur que sur les ordi avec une définition moindre à la HD aient un pb d'affichage)

AINSI QUAND TU AJOUTERAS LES IMAGES QUE J AI FAIT AU JEU, TU DOIT INDIQUER QU ELLES FERONT UNE TAILLE DE 63 * 63 px.


Pour ne pas que tu te prennes la tête je te propose la chose suivante :
	-Vu que les murs sur les bords du jeu sont tjrs les même suivant le mode de jeu et ne changent jamais (de position ni d'apparence)
	je te propose à la mettre sur ta fenêtre dès sa création et de ne jamais y toucher (vu qu'ils changeront pas au cours du jeu)
Du coup sur ta fenêtre de tu auras sur toute sa bordure des murs de taille 63 x 63

	-Pour les parties complexes (les parties avec des murs, des mursmoked etc..) saches que les murs normaux (vector<Mur> mur)
	ne bougent pas de la partie donc tu peux les positionner aussi dès le début sans retoucher à leur affichage par la suite

Après y a un autre truc qui peut te faciliter la tâche mais jsp si c'est possible avec la bibliothèque graphique :
	-si c'est possible de supperposer 2 images -> mets pour la totalité de l'existence de la fenêtre (dès sa création)
	un seule image de chemin de taille 1008 x 1008 et positionnée au centre (taille fenêtre - taille image des murs sur le bord = 1071 - 63 = 1008)
	
	Comme ça tu auras dès la création de ta fenêtre (avant même de gérer le jeu), les bords du jeu (murs) et le terrain (chemin) de placé, ils ne bougeront
	pas donc t'auras plus rien à gérer concernant leur affichage
	-sinon tu seras obligé de gérer l'affichage des chemins comme pour tous les autres éléments (cf juste après)



Pour afficher les autres éléments :
	tu parcours tous les vecteurs (chemin compris ou non, ça dépend si l'étape du deçu est possible) (cf fonction print des classes citées plus haut)
	En fonction du nom du vecteur parcouru (Snake, Mur, smokedMur....) tu places l'image correspondante à la position suivante :
			(element_du_vector.getX() + 1 ) * 63
			(element_du_vector.getX() + 1 ) * 63

Vu que tous tes éléments à placer ont une taille de 63 x 63 et que sur ton affichage tu as déjà les murs externes placés donc si t'as un
MurSmoked qui a une position x = 0 ; y = 0 => sur ton affichage => (x + 1) * 63 = 63 et (y + 1) * 63 = 63 te placera ton image de ce mur
juste après les bordures


A FAIRE ATTENTION A 3 CHOSES :

	Affichage du snake -> regarde la fonction print_snake du fichier Partie.cc parce que quand tu parcours le vector snake tu dois 
	afficher le premier élément avec la photo de Tete_snake et pour le reste du vecteur tu dois positionner l'image du corps du snake

	Pour SmokedMur et VortexMur tu dois avant de faire l'affichage, tester si les flags correspondants à ces types de murs sont actifs
	ou non (jsplu comment ils s'appellent, mais le nom de la variable est ...._ready je crois.
	Si le ...._ready est inactif pour chacun de ces types de mur => l'affichage est celui Mur_Normal
	Sinon tu places l'image du mur associé (Mur_Smoked ; Mur_Vortex et non Mur_Normal)

	Pour le serpent, y a un truc que j'ai pas eu besoin de faire mais que t'auras besoin => tester la sens du serpent
	pour chaque partie du corps (pour tete la déduire avec position du Body suivant et pour les Body comparer avec precédents et suivants)
	En effet, il faut que la tête du serpent se retrouve dans le bon sens (cf images Tete_direction.png) et si a un moment le serpent
	forme un angle (prendre les photos en fonction du bon angle -> bas&gauche ; haut&droite... que je t'ai faite)